#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  watch:
    types: started
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
          path: ./openwrt-ci

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: Download Source
        uses: actions/checkout@v2
        with:
          repository: openwrt/openwrt
          ref: v23.05.4
          path: ./openwrt
          
      - name: Update feeds
        run: |
          cd ./openwrt
          sed -i 's/git.openwrt.org\/feed/github.com\/openwrt/g' ./feeds.conf.default
          sed -i 's/git.openwrt.org\/project/github.com\/openwrt/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          df -h

      - name: Generate configuration file
        run: |
          cd ./openwrt
          rm -f ./.config*
          touch ./.config

          git apply ../openwrt-ci/0001-WWDK7628.patch
          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          cat >> .config <<EOF
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt76x8=y
          CONFIG_TARGET_ramips_mt76x8_DEVICE_wwdk_m7628=y
          CONFIG_PACKAGE_luci=y
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_IPV6=n
          CONFIG_KERNEL_IPV6=n
          CONFIG_KERNEL_IPV6_MULTIPLE_TABLES=n
          CONFIG_KERNEL_IPV6_SUBTREES=n
          CONFIG_KERNEL_IPV6_MROUTE=n
          CONFIG_DEFAULT_ppp=n
          CONFIG_DEFAULT_ppp-mod-pppoe=n
          CONFIG_PACKAGE_ppp=n
          CONFIG_PACKAGE_ppp-mod-pppoe=n
          CONFIG_PACKAGE_odhcp6c=n
          CONFIG_PACKAGE_odhcpd=n
          CONFIG_PACKAGE_odhcpd-ipv6only=n
          CONFIG_PACKAGE_kmod-ppp=n
          CONFIG_PACKAGE_kmod-pppoe=n
          CONFIG_PACKAGE_kmod-pppox=n
          CONFIG_PACKAGE_kmod-mppe=n
          CONFIG_PACKAGE_luci-proto-ppp=n
          CONFIG_PACKAGE_MAC80211_DEBUGFS=n
          CONFIG_PACKAGE_MAC80211_MESH=n
          CONFIG_DEFAULT_nftables=n
          CONFIG_DEFAULT_dnsmasq=n
          CONFIG_DEFAULT_firewall=n
          CONFIG_DEFAULT_firewall4=n
          CONFIG_PACKAGE_kmod-usb-core=n
          CONFIG_PACKAGE_kmod-usb-ehci=n
          CONFIG_PACKAGE_kmod-usb-ohci=n
          CONFIG_PACKAGE_kmod-usb2=n
          CONFIG_PACKAGE_kmod-usb3=n
          CONFIG_KERNEL_DEBUG_FS=n
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
          CONFIG_KERNEL_BUILD_DOMAIN="Geophyson"
          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          cd ./openwrt
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          cd ./openwrt
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./openwrt/bin/targets/ -type d -name "packages")
          cp -rf $(find ./openwrt/bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./openwrt/bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./openwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          cp -f ./openwrt/.config ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./openwrt/bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true